{"version":3,"sources":["../../src/controllers/Auth.js"],"names":["bcrypt","require","jwt","config","User","module","exports","register","req","res","create","body","error","user","status","json","code","message","description","sigin","email","password","findOne","compare","same","token","sign","id","_id","get","expiresIn","token_type","expires_in","access_token"],"mappings":"AAAA,MAAMA,SAASC,QAAQ,UAAR,CAAf;AACA,MAAMC,MAAMD,QAAQ,cAAR,CAAZ;AACA,MAAME,SAASF,QAAQ,QAAR,CAAf;AACA,MAAMG,OAAOH,QAAQ,gBAAR,CAAb;;AAEAI,OAAOC,OAAP,GAAiB;AACf,QAAMC,QAAN,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACxBL,SAAKM,MAAL,CAAYF,IAAIG,IAAhB,EAAsB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACrC,UAAID,KAAJ,EAAW;AACT,eAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAM,GADoB;AAE1BC,mBAAS,oBAFiB;AAG1BC,uBAAaN;AAHa,SAArB,CAAP;AAKD;;AAED,aAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,eAAX,EAArB,CAAP;AACD,KAVD;AAWD,GAbc;;AAef,QAAME,KAAN,CAAaX,GAAb,EAAkBC,GAAlB,EAAuB;AACrB,UAAM,EAAEW,KAAF,EAASC,QAAT,KAAsBb,IAAIG,IAAhC;;AAEAP,SAAKkB,OAAL,CAAa,EAAEF,KAAF,EAAb,EAAwB,CAACR,KAAD,EAAQC,IAAR,KAAiB;AACvC,UAAID,KAAJ,EAAW;AACT,eAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAM,GADoB;AAE1BC,mBAAS,oBAFiB;AAG1BC,uBAAaN;AAHa,SAArB,CAAP;AAKD;;AAED,UAAIC,IAAJ,EAAU;AACRb,eAAOuB,OAAP,CAAeF,QAAf,EAAyBR,KAAKQ,QAA9B,EAAwC,CAACT,KAAD,EAAQY,IAAR,KAAiB;AACvD,cAAIZ,KAAJ,EAAW;AACT,mBAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,oBAAM,GADoB;AAE1BC,uBAAS,oBAFiB;AAG1BC,2BAAaN;AAHa,aAArB,CAAP;AAKD;;AAED,cAAIY,IAAJ,EAAU;AACR,gBAAIC,QAAQvB,IAAIwB,IAAJ,CAAS,EAAEC,IAAId,KAAKe,GAAX,EAAT,EAA2BzB,OAAO0B,GAAP,CAAW,QAAX,CAA3B,EAAiD;AAC3DC,yBAAW,KAAK;AAD2C,aAAjD,CAAZ;;AAIArB,gBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBgB,0BAAY,QADO;AAEnBC,0BAAY,IAFO;AAGnBC,4BAAcR;AAHK,aAArB;AAKD,WAVD,MAUO;AACL,mBAAOhB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,oBAAM,GADoB;AAE1BC,uBAAS,oBAFiB;AAG1BC,2BAAa;AAHa,aAArB,CAAP;AAKD;AACF,SA1BD;AA2BD,OA5BD,MA4BO;AACL,eAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAM,GADoB;AAE1BC,mBAAS,oBAFiB;AAG1BC,uBAAa;AAHa,SAArB,CAAP;AAKD;AACF,KA5CD;AA6CD;AA/Dc,CAAjB","file":"Auth.js","sourcesContent":["const bcrypt = require('bcryptjs')\nconst jwt = require('jsonwebtoken')\nconst config = require('config')\nconst User = require('../models/User')\n\nmodule.exports = {\n  async register (req, res) {\n    User.create(req.body, (error, user) => {\n      if (error) {\n        return res.status(400).json({\n          code: 400,\n          message: 'Wrong credentials!',\n          description: error\n        })\n      }\n\n      return res.status(201).json({ message: 'Login created' })\n    })\n  },\n\n  async sigin (req, res) {\n    const { email, password } = req.body\n\n    User.findOne({ email }, (error, user) => {\n      if (error) {\n        return res.status(400).json({\n          code: 400,\n          message: 'Wrong credentials!',\n          description: error\n        })\n      }\n\n      if (user) {\n        bcrypt.compare(password, user.password, (error, same) => {\n          if (error) {\n            return res.status(400).json({\n              code: 400,\n              message: 'Wrong credentials!',\n              description: error\n            })\n          }\n\n          if (same) {\n            let token = jwt.sign({ id: user._id }, config.get('secret'), {\n              expiresIn: 60 * 60\n            })\n\n            res.status(200).json({\n              token_type: 'Bearer',\n              expires_in: 3600,\n              access_token: token\n            })\n          } else {\n            return res.status(400).json({\n              code: 400,\n              message: 'Wrong credentials!',\n              description: 'Wrong password!'\n            })\n          }\n        })\n      } else {\n        return res.status(400).json({\n          code: 400,\n          message: 'Wrong credentials!',\n          description: 'Wrong email!'\n        })\n      }\n    })\n  }\n}\n"]}